apiVersion: apps/v1
kind: Deployment
metadata:
  name: craned
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "crane.labels" . | nindent 4 }}
    app: craned
spec:
  replicas: {{ .Values.craned.replicaCount }}
  selector:
    matchLabels:
      app: craned
  template:
    metadata:
      {{- with .Values.craned.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: craned
    spec:
      {{- with .Values.craned.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: craned
      containers:
        - name: craned
          image: "{{ .Values.craned.image.repository }}:{{ .Values.craned.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.craned.image.pullPolicy }}
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: CRANE_SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - /craned
          args:
            - --recommendation-configuration-file=/tmp/recommendation-config/config.yaml
          {{- range $key, $value := .Values.craned.containerArgs }}
            {{- if $value }}
            - --{{ $key }}={{ $value }}
            {{- else }}
            - --{{ $key }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
            - name: config
              mountPath: /tmp/recommendation-config
          ports:
            - name: http
              containerPort: 9443
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/healthz
              port: 8082
              scheme: HTTP
          resources:
            {{- toYaml .Values.craned.resources | nindent 12 }}
        {{ if .Values.cranedDashboard.enable }}
        - name: dashboard
          volumeMounts:
            - mountPath: /etc/nginx/conf.d/
              name: nginx-conf
          image: "{{ .Values.cranedDashboard.image.repository }}:{{ .Values.cranedDashboard.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.cranedDashboard.image.pullPolicy }}
        {{ end }}
      {{- with .Values.craned.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.craned.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.craned.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: webhook-server-tls
        - name: config
          configMap:
            name: recommendation-configuration
        {{ if .Values.cranedDashboard.enable }}
        - name: nginx-conf
          configMap:
            name: nginx-conf
        {{ end }}

---
apiVersion: v1
data:
  tls.crt: {{ .Files.Get "keys/tls.crt" | b64enc }}
  tls.key: {{ .Files.Get "keys/tls.key" | b64enc }}
kind: Secret
metadata:
  name: webhook-server-tls
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "crane.labels" . | nindent 4 }}
type: kubernetes.io/tls

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: recommendation-configuration
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "crane.labels" . | nindent 4 }}
data:
  config.yaml: |-
    apiVersion: analysis.crane.io/v1alpha1
    kind: RecommendationConfiguration
    recommenders:
      - name: Replicas
        acceptedResources:
          - kind: Deployment
            apiVersion: apps/v1
          - kind: StatefulSet
            apiVersion: apps/v1
      - name: Resource
        acceptedResources:
          - kind: Deployment
            apiVersion: apps/v1
          - kind: StatefulSet
            apiVersion: apps/v1

{{ if .Values.cranedDashboard.enable }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: {{ .Release.Namespace }}
data:
  common_params: |
    proxy_connect_timeout       180;
    proxy_send_timeout          180;
    proxy_read_timeout          180;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header  Host $http_host;
    proxy_set_header  Upgrade $http_upgrade;
    proxy_set_header  Connection $connection_upgrade;
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  nginx.conf: |
    gzip_static  on;

    # Enable gzip encoding for content of the provided types of 50kb and higher.
    gzip on;
    gzip_min_length 50000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/vnd.ms-fontobject
        application/wasm
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/bmp
        image/svg+xml
        text/cache-manifest
        text/calendar
        text/css
        text/javascript
        text/markdown
        text/plain
        text/xml
        text/x-component
        text/x-cross-domain-policy;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream cluster {
        server craned.{{ .Release.Namespace }}:8082;
    }

    resolver kube-dns.kube-system.svc.cluster.local valid=5s;

    server {
        server_name _;
        large_client_header_buffers 4 32k;
        add_header Cache-Control "must-revalidate";
        add_header Cache-Control "max-age=300";
        add_header ETag "1.90.0-rc.0";
        listen 9090;
        listen [::]:9090;
        location / {
            root /usr/share/nginx/html/;
            include /etc/nginx/mime.types;
            try_files $uri $uri/ /index.html;
        }
        location /grafana {
            set $upstream_grafana grafana.{{ .Release.Namespace }}.svc.cluster.local;
            proxy_pass http://$upstream_grafana:8082;
            rewrite /grafana/(.*) /$1 break;
            include conf.d/common_params;
            add_header Access-Control-Allow-Origin *;
        }
        # /api/v1/cluster /api/v1/namespaces
        location /api {
            proxy_pass http://cluster;
            include conf.d/common_params;
        }
    }
{{ end }}
